kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: ledger-db
spec:
  serviceName: "ledger-db"
  replicas: 1
  selector:
    matchLabels:
      app: ledger-db
  template:
    metadata:
      labels:
        app: ledger-db
    spec:
      serviceAccountName: default
      containers:
        - name: postgres
          image: gcr.io/bank-of-anthos-ci/ledger-db:v0.5.7
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: environment-config
            - configMapRef:
                name: ledger-db-config
            - configMapRef:
                name: demo-data-config
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
            limits:
              cpu: 250m
              memory: 1Gi
          volumeMounts:
            - name: postgresdb
              mountPath: /var/lib/postgresql/data
              subPath: postgres
      volumes:
        - name: postgresdb
          emptyDir: {}
# [END gke_boa_kubernetes_manifests_ledger_db_statefulset_ledger_db]
---
# [START gke_boa_kubernetes_manifests_ledger_db_configmap_ledger_db_config]
apiVersion: v1
kind: ConfigMap
metadata:
  name: ledger-db-config
  labels:
    app: postgres
data:
  POSTGRES_DB: postgresdb
  POSTGRES_USER: admin
  POSTGRES_PASSWORD: password
  SPRING_DATASOURCE_URL: jdbc:postgresql://ledger-db:5432/postgresdb
  SPRING_DATASOURCE_USERNAME: admin # should match POSTGRES_USER
  SPRING_DATASOURCE_PASSWORD: password # should match POSTGRES_PASSWORD
# [END gke_boa_kubernetes_manifests_ledger_db_configmap_ledger_db_config]
---
# [START gke_boa_kubernetes_manifests_ledger_db_service_ledger_db]
apiVersion: v1
kind: Service
metadata:
  name: ledger-db
spec:
  type: ClusterIP
  selector:
    app: ledger-db
  ports:
  - name: tcp
    port: 5432
    targetPort: 5432
# [END gke_boa_kubernetes_manifests_ledger_db_service_ledger_db]
---
# [START gke_boa_kubernetes_manifests_ledger_writer_deployment_ledgerwriter]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ledgerwriter
spec:
  selector:
    matchLabels:
      app: ledgerwriter
  template:
    metadata:
      labels:
        app: ledgerwriter
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: ledgerwriter
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/bank-of-anthos-ci/ledgerwriter:v0.5.7
        volumeMounts:
        - name: publickey
          mountPath: "/tmp/.ssh"
          readOnly: true
        - mountPath: /tmp
          name: tmp
        env:
        - name: VERSION
          value: "v0.5.7"
        - name: PORT
          value: "8080"
        - name: ENABLE_TRACING
          value: "true"
        - name: ENABLE_METRICS
          value: "true"
         # tell Java to obey container memory limits
        - name: JVM_OPTS
          value: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Xms256m -Xmx512m"
        # service level override of log level
        - name: LOG_LEVEL
          value: "info"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: environment-config
        - configMapRef:
            name: service-api-config
        # add ledger-db credentials from ConfigMap
        - configMapRef:
            name: ledger-db-config
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 10
        startupProbe:
          httpGet:
            path: /ready
            port: 8080
          failureThreshold: 30
          periodSeconds: 10
      volumes:
      - name: publickey
        secret:
          secretName: jwt-key
          items:
          - key: jwtRS256.key.pub
            path: publickey
      - emptyDir: {}
        name: tmp
# [END gke_boa_kubernetes_manifests_ledger_writer_deployment_ledgerwriter]
---
# [START gke_boa_kubernetes_manifests_ledger_writer_service_ledgerwriter]
apiVersion: v1
kind: Service
metadata:
  name: ledgerwriter
spec:
  type: ClusterIP
  selector:
    app: ledgerwriter
  ports:
  - name: http
    port: 8080
    targetPort: 8080
# [END gke_boa_kubernetes_manifests_ledger_writer_service_ledgerwriter]
---
# [START gke_boa_kubernetes_manifests_balance_reader_deployment_balancereader]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: balancereader
spec:
  selector:
    matchLabels:
      app: balancereader
  template:
    metadata:
      labels:
        app: balancereader
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: balancereader
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/bank-of-anthos-ci/balancereader:v0.5.7
        volumeMounts:
        - name: publickey
          mountPath: "/tmp/.ssh"
          readOnly: true
        - mountPath: /tmp
          name: tmp
        env:
        - name: VERSION
          value: "v0.5.7"
        - name: PORT
          value: "8080"
        # toggle Cloud Trace export
        - name: ENABLE_TRACING
          value: "true"
        - name: ENABLE_METRICS
          value: "true"
        - name: POLL_MS
          value: "100"
        - name: CACHE_SIZE
          value: "1000000"
        # tell Java to obey container memory limits
        - name: JVM_OPTS
          value: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Xms256m -Xmx512m"
        # Valid levels are debug, info, warn, error, fatal.
        # If no valid level is set, will default to info.
        - name: LOG_LEVEL
          value: "info"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: environment-config
        # add ledger-db credentials from ConfigMap
        - configMapRef:
            name: ledger-db-config
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthy
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 5
          timeoutSeconds: 10
        startupProbe:
          httpGet:
            path: /healthy
            port: 8080
          failureThreshold: 30
          periodSeconds: 10
      volumes:
      - name: publickey
        secret:
          secretName: jwt-key
          items:
          - key: jwtRS256.key.pub
            path: publickey
      - emptyDir: {}
        name: tmp
# [END gke_boa_kubernetes_manifests_balance_reader_deployment_balancereader]
---
# [START gke_boa_kubernetes_manifests_balance_reader_service_balancereader]
apiVersion: v1
kind: Service
metadata:
  name: balancereader
spec:
  type: ClusterIP
  selector:
    app: balancereader
  ports:
  - name: http
    port: 8080
    targetPort: 8080
# [END gke_boa_kubernetes_manifests_balance_reader_service_balancereader]
---
# [START gke_boa_kubernetes_manifests_transaction_history_deployment_transactionhistory]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transactionhistory
spec:
  selector:
    matchLabels:
      app: transactionhistory
  template:
    metadata:
      labels:
        app: transactionhistory
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: transactionhistory
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/bank-of-anthos-ci/transactionhistory:v0.5.7
        volumeMounts:
        - name: publickey
          mountPath: "/tmp/.ssh"
          readOnly: true
        - mountPath: /tmp
          name: tmp
        env:
        - name: VERSION
          value: "v0.5.7"
        - name: PORT
          value: "8080"
        - name: ENABLE_TRACING
          value: "true"
        - name: ENABLE_METRICS
          value: "true"
        - name: POLL_MS
          value: "100"
        - name: CACHE_SIZE
          value: "1000"
        - name: CACHE_MINUTES
          value: "60"
        - name: HISTORY_LIMIT
          value: "100"
          # tell Java to obey container memory limits
        - name: JVM_OPTS
          value: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Xms256m -Xmx512m"
        #- name: EXTRA_LATENCY_MILLIS
        #  value: "5000"
        # Valid levels are debug, info, warn, error, fatal.
        # If no valid level is set, will default to info.
        - name: LOG_LEVEL
          value: "info"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: environment-config
        # add ledger-db credentials from ConfigMap
        - configMapRef:
            name: ledger-db-config
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthy
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 5
          timeoutSeconds: 10
        startupProbe:
          httpGet:
            path: /healthy
            port: 8080
          failureThreshold: 30
          periodSeconds: 10
      volumes:
      - name: publickey
        secret:
          secretName: jwt-key
          items:
          - key: jwtRS256.key.pub
            path: publickey
      - emptyDir: {}
        name: tmp
# [END gke_boa_kubernetes_manifests_transaction_history_deployment_transactionhistory]
---
# [START gke_boa_kubernetes_manifests_transaction_history_service_transactionhistory]
apiVersion: v1
kind: Service
metadata:
  name: transactionhistory
spec:
  type: ClusterIP
  selector:
    app: transactionhistory
  ports:
  - name: http
    port: 8080
    targetPort: 8080
# [END gke_boa_kubernetes_manifests_transaction_history_service_transactionhistory]
---
# [START gke_boa_kubernetes_manifests_frontend_service_frontend]
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: LoadBalancer
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080
# [END gke_boa_kubernetes_manifests_frontend_service_frontend]
---
# [START gke_boa_kubernetes_manifests_userservice_service_userservice]
apiVersion: v1
kind: Service
metadata:
  name: userservice
spec:
  type: ClusterIP
  selector:
    app: userservice
  ports:
  - name: http
    port: 8080
    targetPort: 8080
# [END gke_boa_kubernetes_manifests_userservice_service_userservice]
---
# [START gke_boa_kubernetes_manifests_contacts_service_contacts]
apiVersion: v1
kind: Service
metadata:
  name: contacts
spec:
  type: ClusterIP
  selector:
    app: contacts
  ports:
  - name: http
    port: 8080
    targetPort: 8080
# [END gke_boa_kubernetes_manifests_contacts_service_contacts]
---
# [START gke_boa_kubernetes_manifests_accounts_db_service_accounts_db]
apiVersion: v1
kind: Service
metadata:
  name: accounts-db
  labels:
    app: accounts-db
    tier: db
spec:
  ports:
    - port: 5432
      name: tcp
      targetPort: 5432
      protocol: TCP
  selector:
    app: accounts-db
    tier: db
# [END gke_boa_kubernetes_manifests_accounts_db_service_accounts_db]
---
# [START gke_boa_kubernetes_manifests_config_configmap_environment_config]
apiVersion: v1
kind: ConfigMap
metadata:
  name: environment-config
data:
  LOCAL_ROUTING_NUM: "883745000"
  PUB_KEY_PATH: "/tmp/.ssh/publickey"
# [END gke_boa_kubernetes_manifests_config_configmap_environment_config]
---
# [START gke_boa_kubernetes_manifests_config_configmap_service_api_config]
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-api-config
data:
  TRANSACTIONS_API_ADDR: "ledgerwriter:8080"
  BALANCES_API_ADDR: "balancereader:8080"
  HISTORY_API_ADDR: "transactionhistory:8080"
  CONTACTS_API_ADDR: "contacts:8080"
  USERSERVICE_API_ADDR: "userservice:8080"
# [END gke_boa_kubernetes_manifests_config_configmap_service_api_config]
---
# [START gke_boa_kubernetes_manifests_config_configmap_demo_data_config]
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-data-config
data:
  USE_DEMO_DATA: "True"
  DEMO_LOGIN_USERNAME: "testuser"
  # All demo user accounts are hardcoded to use the login password 'bankofanthos'
  DEMO_LOGIN_PASSWORD: "bankofanthos"
# [END gke_boa_kubernetes_manifests_config_configmap_demo_data_config]
---
# [START gke_jwt_jwt_secret_secret_jwt_key]
# This secret contains a keypair used to sign and verify JWTs for authentication
# In practice, this should never be checked into version control. It is provided here to simplify deployment
apiVersion: v1
kind: Secret
metadata:
  name: jwt-key
type: Opaque
data:
  jwtRS256.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS3dJQkFBS0NBZ0VBNEd2Wk5Ta2o1aWlXYjJEWk0yZkN4NWJHR1lnd2FLNFNNc3lJOEs4b0ZRZXBMMTNZClJPWEt3NVMrbEVMSDlBZXRUZGNUQWRrYkN6eWFwU2RrM1Bxd3hoQ2FmNGtudktlUmk3NmNzRzZtYzBrcngxR0kKdFk2NVgrTnEwcWFSdkxkT09iRlFHbUlIeDc1emtaNjU0K2Z0dm52Q1k1T1BqVjQ0TGt0dTF3bHJCbXIyMjVRUwpGYklhOEE5NkJTcEp6S20wYWhLKzZyOFZ2dk9xMUJIR1pJSUtLR1E3L3pMdXhQT24rYzN3Q0YwVlFZMjBZNFhvCm8rRFZ0LyswTUk4T1p2ZEF1YWIyVVh1YitUaXdBZ0c3Njh5bkpQaDdla2xMdGR0QTFCR2dsWG1vRVI0eHZoaFgKUXNPUnRUaTYwRlpQWDdDM1YxcmxVZStyVTlCWTZDbHJXbGVKdGdCZjFYUi90Qm1MZGZCNFlWbkt0ekI3dkxDbApPS3VsdGFkdVNWbmZ2OEMwdXoxelBCWkl3WG5zVk83WHlTVlBBSkJUOFBWR1Iza2JnOW5FRGsvclZsS1lNSW5EClNPOFNITnlLTytrNnBUaG1hbW9xTUJKQkNwY0MrRzFVUFVxWWV1Szh3NjZaU3BLV2ZQY3RtWWViUHNraUpiS2UKT3JIVlUyRGo3enpkaW1MMmJlaHFTd1NpM3pBa2xXZjRGU0F6aC80enBENFdxM0lDd2NYbFBxYTU5T0IwcXFBQwp4NUFtRUZsdlF1VUkwcTZ3WjZ2cmxBWUsrTWRtNER2RkFVbFhzNW1mbDZPRnZ0YkZTZHF1ckU2SXROVnlSVlFBCmx6WFdtaEM4R3JXQklodDFPSkxXREtPNWx2Wm1KUS9sazdic1VyNCsyK05ObnNzTXBuTUI2QytJejZzQ0F3RUEKQVFLQ0FnRUFoQ0c3ZnpzN3NiVlA3VCsrWWkvRFZMUUc2dDF1Y3hPYUQyS3hkZFFLNjJiWlM5UWJFMldnWGtyagpjbk5uT3R5U1F2UlFjcFFiQWlDcWhIYVBRalF2aEU0ZVNOeStFcXN1WEhMYjJsMHJqMUVUZjRVWDBwMjNzeWM0CnE5SDZtSHZzaUxkSERHR1BaeUZROWZuWVJNRTNEeUhhcjdvZm1RSlNYWjk0SVErZ2ZlVFlkeXZWQWdVZEt4NVIKbjF6b21xR0lZYk9yeUphOC9QS0dMOXBQVHJucHRTSmUyTUJxS0hlMC9MVXRrQjhOOXN5eDJxN3E3Q0hpY3pVUQpLRTd5RWRtZHVERC9jYll2ZlNyTkprRlRIV0FmUVBzejZDbmpjNjBsbkRiTXIzVXphUEM0Sk00OEFra1hMdlc1CnVCUTVJNFB1VG5acjhqUUVVWktuNWZrTkJlSG9aNjlZVVp2eWdOcGJRaVMxWi9CRzYwVDVZN1VPY09wWVJ2bCsKL0dSNUFSNnpZQVJKbTBKNmg3U2NsdGhLSjdaVnFldWV5U3B1UG9mTjg0V241Zm1mbWdsR2F0dlc4KzFGR2ZNRQppWGxHbzhHQ1ZyampzN013a0pMT3Jlc0lRblFWK3ZmWC95Nk9WRExMS21yeGJCT3BPcm5TK01icnFoOXBsRGFICks1N0VOVngzWWxVd2M3bFRHd2Q2cS9nVnhSWDZRc1F3VEl5UHVOOUozMWd0dXRCeS9FTVVGc1hJenJhRmRIQzgKZXVlT1N3V0JQT05XbUkzN1BCVTIycXFyMWE3d1Y3Z0lJOGg3WS8waDNDYjFYWjZsQ2FzOCt0emI3VFZNMGxWQwpINWNYaXRqM2xKS1B1b2VzOXpTNFhEQjQ0V1hwZkw4SFVXQ1NuSWF2ZVJYUHhwbDRJbUVDZ2dFQkFQMjJEZml3CmVaRDBSTzlManJSR2cxODJlNnNSZ052VUQrOTFjUnBRNFBDcnlKQm1tTmNWOFBNZVdoZFlPaHdCWW1JMjkyWkkKcjFyeHVwclBCdE43dTNnWmhKYkVXL1IvSFozc2lPSmNycHlhejBVNUpDSzRTOERSbkdnUUdOQUdJNFlsVUNxNwpLL2JOa0JLcnRpSEVpOWV6RGQ3SjIrRGJGK0FiSXNWdlNnNnNHdEp1TG8rY0VRUzFaNzkycTQ5NUt6dWJyUDhvClVIbWFuc1R1ZEtLL1lZY0dlcU9pS2V0bmgrK0ZUc0hXek1NTEJ3VllySVlZRHZ5RWUvZEFkNWUzM3ZTRSsrbXkKZEVaVkZidVRMQmdzSW4wM0dmZ1pnNE56QkNhSm9NZGJtU3NiaUxGMkRTL1g4eXNKNldLYzdVTFMwMXJwSjBLTgo0VldQNjhiZlZOd1YwbmtDZ2dFQkFPSnlKaVN5aGJrL1hEVjRzT2ZLS1BBQ3RJTkN0ZWk2OWpYVVVOUHNhQndNCjFMNURCOU5tNjhLb3piVTN1Rk9QbmRPZERrMms5cm5WS1JkSlYrTHhPQ2NEdE5aMzlGQ3JtbUs3TGc4TnBUM2cKVksxc29YamFtcGI3NU1LWjZzaGFIUDRFUUMvTVVoeVF1UXkydEtUS3JMYUNFRmdzR1RhRHFaOU9xMVdIZzhWNwoxdUkzak8xYnNzNFRQWjJxbXVOYjE0WEMzQnJaeDE4eWY3MnJZMEk5RTAxdXorUmp4VUdSK0E3dlloSklYVWtMCmtzQTJqV1ludktsVmZRRWJpWlVpcjQ0d2IraEZ4Z3JwcVBvSmNCTzgvdS9UYXZ3MjFqbjFkRys3NWZqZnI5M3UKRjExbUh2VVY2Z0RJenN4NDVicDVDek5oUmdTTHNRZk9INFdpdytIcUNrTUNnZ0VCQU1UZGtFZkpmL3IzWDhvaQo0ZStHeTRlRStqOEtqT2VHekhxdHNYNlBCWXdhYjcyRXJ0SXV4MUdPMnE5RW1ZcURsSGpMVi9zNUtVQXpVKzJ0CitRaisrTCsvWlQrcnpBS1M1RU5YZC92Vm1QUVJ1QVZweWwxYWpnVm5ZS3JxMnFZSUxXWjQ2NVRNdWRkL09HMFUKYW5ZWFViK2t3MzE5T3ExbXRFY0VKMTMxOWd3ZWhZMkZTNEhKd3ZiWllGQ1QzNW1ybHQxZzljTGo0RllMb1drRAo4dU1hQjY1RFc4US9IN0gzR3ViRGxSSVovN2JVaHJVaVVuU1dsSUppdHVKclZxRVdYdDF6bHhtR2pHekt0dHRlCjNwYy9IOS96Y3FZdC9mdHdzdWJJWWtadkVCSUFBbmhaTnZCSjYva1liczFESVdONXZlRE1DOWU3eWY2ZmQzOVEKYWtPQWQxa0NnZ0VCQUpCQ2RraFVydHBJSWg4eWgwanpRa2M5QWZESlZBZ3k2MTE1cUJDS2YveTJzK1dONEhOdQpFdTROQ2hmVHFvc1phRXVDdDdVQlRla3ZnaUVDcVltN2NMRnlMQWVobmJTeXpnVHVDRGF3MDc5cXBhZGlHREJjCjI3VXFQaDgzWFJwTVJrSVJSUzd1TkxWY0FYZTNBYmdtSWdlWExvQnRmNVo2SkZxSURLRE5WMFk5VWJVRi9MTE8KQTBoRGU3SnhHSUdWWmVVaU1ZU3RqdFQzMytkZVF6clVtL0p0a09XSUpnZFN6YnYrQnZWc3dua2hkVmtjcDlJWApxSm9jQ3lua2VDN1pUUXdCa1psZ3NmMEx4SW1kNzVlemhKb1dqd2FraksrWnpwYk1Gb01KUmduVmYyOFIrdERhCktCeGQwVmowQUM1ZXBLTVQ2ajVGRy8vRDhkTDUwVjZmOGU4Q2dnRUJBTWgreklJb3FKZWlXTGgzOUFtTTRQZEkKSFNod0lISXBUNUhGS05jOTFzRnRDZFdXVDIweXVPZHNLZU9TTDZjMjJsVFpjcklFZFlDY0Q5SVhyWm8xVmxXOAorSGFmNDFhcHhlaU1PZVBNR3ZlNEQ2ZEdrUXcyWXBuNXlOQUUwYk1qa1hFU3JuMzMvV3JqSFFtWFdvNmFSdnVZCnkrMktzbGwvK1BzajlwNXd3WVYxRGp0QzFXU0lmdFZNMkJuRlViQVVyMmNHSVNXWlNnWU9yUDU1elZKK3REeloKSXhrMDZ6TUNZU3pEL1pPTUJZSjUvTFFPWnlPUUs0R2xnMytUUUNXUERHNTRtUEo0dElmNUZCZ25wSU5QRGNLQwpLc2RTQlg4S0xNeU83aEVzOCtuZFRWNWlxa0pscGNCdVJ3VXVUSmlFakc0MWZnaXZPVThTR0V5elZPbW1NNG89Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  jwtRS256.key.pub: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUE0R3ZaTlNrajVpaVdiMkRaTTJmQwp4NWJHR1lnd2FLNFNNc3lJOEs4b0ZRZXBMMTNZUk9YS3c1UytsRUxIOUFldFRkY1RBZGtiQ3p5YXBTZGszUHF3CnhoQ2FmNGtudktlUmk3NmNzRzZtYzBrcngxR0l0WTY1WCtOcTBxYVJ2TGRPT2JGUUdtSUh4NzV6a1o2NTQrZnQKdm52Q1k1T1BqVjQ0TGt0dTF3bHJCbXIyMjVRU0ZiSWE4QTk2QlNwSnpLbTBhaEsrNnI4VnZ2T3ExQkhHWklJSwpLR1E3L3pMdXhQT24rYzN3Q0YwVlFZMjBZNFhvbytEVnQvKzBNSThPWnZkQXVhYjJVWHViK1Rpd0FnRzc2OHluCkpQaDdla2xMdGR0QTFCR2dsWG1vRVI0eHZoaFhRc09SdFRpNjBGWlBYN0MzVjFybFVlK3JVOUJZNkNscldsZUoKdGdCZjFYUi90Qm1MZGZCNFlWbkt0ekI3dkxDbE9LdWx0YWR1U1ZuZnY4QzB1ejF6UEJaSXdYbnNWTzdYeVNWUApBSkJUOFBWR1Iza2JnOW5FRGsvclZsS1lNSW5EU084U0hOeUtPK2s2cFRobWFtb3FNQkpCQ3BjQytHMVVQVXFZCmV1Szh3NjZaU3BLV2ZQY3RtWWViUHNraUpiS2VPckhWVTJEajd6emRpbUwyYmVocVN3U2kzekFrbFdmNEZTQXoKaC80enBENFdxM0lDd2NYbFBxYTU5T0IwcXFBQ3g1QW1FRmx2UXVVSTBxNndaNnZybEFZSytNZG00RHZGQVVsWApzNW1mbDZPRnZ0YkZTZHF1ckU2SXROVnlSVlFBbHpYV21oQzhHcldCSWh0MU9KTFdES081bHZabUpRL2xrN2JzClVyNCsyK05ObnNzTXBuTUI2QytJejZzQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo=
# [END gke_jwt_jwt_secret_secret_jwt_key]
---